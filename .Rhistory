ds = subset(d, d[[cLabel]]==iObject)
if(max(ds[[cLifetime]]) > minLifetime) {
plot(ds[[cFrame]],ds[[cIntensity]])
x = round(mean(ds[[cX]]),1)
y = round(mean(ds[[cY]]),1)
title(paste0(iObject,"  x:",x,"  y:",y))
}
}
dev.off()
path = file.choose()
rnorm
rnorm(10, mean = 0, sd = 1)
d = data.frame()
d$label = c("ctrl","ctrl")
d = data.frame(label = character(0))
d
d$label = c("ctrl","ctrl")
d.append("ctrl")
d <- rbind(d,c("label")
)
d
d$label
?t.test
Control = c(91, 87, 99, 77, 88, 91)Treat = c(101, 110, 103, 93, 99, 104)
> t.test(Control,Treat,alternative="less", var.equal=TRUE)
Control = c(91, 87, 99, 77, 88, 91)
Treat = c(101, 110, 103, 93, 99, 104)
t.test(Control,Treat,alternative="less", var.equal=TRUE)
d = data.frame(v = c(1,2,3,4,5,2,3,4,4), t=c("a","a","a","a","b","b","b","b","b"))
d
t.test(d$v ~ d$t)
t.test(d$v ~ d$t, var.equal=TRUE)
sd(d$v)
3.6-2.5
mad
mad(c(1,2,4,2,3,5,5,6,7,4))
sd(c(1,2,4,2,3,5,5,6,7,4))
?amd
?mad
?merge
?subset
length(c(1212,2,2))
seq(1,2)
seq(2,2)
require(plyr)
?subset
?subset
source('~/Downloads/asmallhelp/neurodistquant.R', echo=TRUE)
basefolder = paste(c("",tmp[1:(length(tmp)-1)]),collapse="/")
basefolder
folders <- list.dirs(basefolder, full.names=TRUE, recursive=F)
folders
## computation
for (folder in folders) {
print(folder)
filenames <- list.files(folder, pattern="*.txt", full.names=TRUE)
ldf <- lapply(filenames, function(z) read.table(z,sep="\t",col.names=c("x","y")))
## check how many measurements we have and construct a dataframe
N = length(ldf)
M = 0
for (i in 1:N) {
M = M + nrow(ldf[[i]])
}
v = vector(length=M)
d = data.frame(segment=v, segment.last=v, x=v, y=v, fish=v, d=v, dNorm=v)
## fill dataframe
M = 1
for (i in 1:N) {
#dx = c(diff(ldf[[i]]$x),0)
#dy = c(diff(ldf[[i]]$y),0)
m = nrow(ldf[[i]])
M2 = M + m - 1
d$segment[M:M2] = seq(1:m)
d$segment.last[M:(M2-1)] = 0
d$segment.last[M2] = 1
d$x[M:M2] = ldf[[i]]$x
d$y[M:M2] = ldf[[i]]$y
d$fish[M:M2] = i
#d[M:M2][["y"]] = ldf[[i]]$y
M = M2 + 1
#d = sqrt(dx^2+dy^2)
#totals[i] = sum(d)
#drel = d/totals[i]
#print(nrow(ldf[[i]]))
#print(totals[i])
}
## analyse
d$d = c(sqrt(diff(d$x)^2 + diff(d$y)^2),0)
d$d[which(d$segment.last==1)] = NaN
total = tapply(d$d, d$fish, function(z) sum(z,na.rm=T))
mean.total = mean(total)
total = data.frame(fish = as.numeric(names(total)), total)
d = merge(d,total)
d$dNorm = d$d / d$total
total = tapply(d$dNorm,d$fish,sum)
seg.avg = tapply(d$dNorm,d$segment,function(z) mean(z,na.rm=T))
seg.sd = tapply(d$dNorm,d$segment,function(z) sd(z,na.rm=T))
seg.N = tapply(d$dNorm,d$segment,function(z) sum(!is.nan(z)))
seg.i = seq(1,length(seg.N))
dseg = data.frame(segment = seg.i,average=seg.avg,sd=seg.sd,sem=seg.sd/sqrt(seg.N),N=seg.N)
treatment = last_folder(folder)
write.table(d,sep=',',file=file.path(basefolder,paste0(treatment,"--table",".csv")),row.names=F)
write.table(dseg,sep=',',file=file.path(basefolder,paste0(treatment,"--segments",".csv")),row.names=F,col.names=T)
write.table(mean.total,sep=',',file=file.path(basefolder,paste0(treatment,"--mean.total",".csv")),row.names=F,col.names=c("total"))
print(treatment)
print(dseg)
}
is.null(a)
is.numeric(a)
exists(a)
exist(a)
exists(a)
?exists
exists("a")
a <- 1
exists("a")
b==T
a = NaN
is.na(a)
is.nan(a)
a = list()
a$1=1
a$a=1
length(a)
1 == 1.0
(1/3 + 1/3 + 1/3) == 1.0
(1/3 + 1/3 + 1/2) == 1.0
(1/3 + 1/3 + 1/3) == 1
1/3+1/3
(2/3 + 1/3) == 1
a = 1
(2/3 + 1/3) == a
(2/3 + 1/3) == a
3+4+3+4+4+4+4+3.5+4.5+3.5+3.5+4.5
1-(0.05)^2
1-(0.05)^(1/2)
(1-0.77)^2
install.packages(c("shiny", "plotly","shinyjs","xlsx"))
library(shiny)
runGitHub("shinyHTM", "tischi")
1.5^(1/4)
1.5^(4)
1.5^(2)
1.5^(3)
3.5^(3)
3.5^(2)
1.5^(2)
1.25^(2)
map_dbl
?map_dbl
??map_dbl
runGitHub("shinyHTM", "tischi")
library(shiny)
runGitHub("shinyHTM", "tischi")
?runcodeUI
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
runcodeUI(code = "shinyjs::alert('Hello!')")
),
server = function(input, output) {
runcodeServer()
}
)
}
source('~/Desktop/Untitled.R', echo=TRUE)
textInput("prefixFile", "Prefix: column with file name", "FileName_")
source('~/Desktop/Untitled.R', echo=TRUE)
source('~/Desktop/Untitled.R', echo=TRUE)
textInput("text", "Please enter some text", "some text")
source('~/Desktop/Untitled.R', echo=TRUE)
?runcodeUI
if (interactive()) {
source('~/Desktop/Untitled.R', echo=TRUE)
?setTkProgressBar
acos(1.0)
acos(1)
acos(-1)
d1 = c( 1, 2 )
d2 = c( 2, 3 )
d1 * d2
d1 %*% d2
d1^2
pos = c(1,2,3,4,5,6,7,8,10)
d <- data.frame(Position.X = pos, Position.Y = pos, Position.Z = pos )
source('~/Documents/andrea-callegari-chromosome-congression/analysis-R/functions.R')
d <- angles_between_subsequent_vectors( d, dt = 1, ddt = 1 )
#
d
runif(1)
runif(1,10)
runif(10,1)
?runif
runif(10,0,1)
d <- data.frame(Position.X = runif(10,0,1), Position.Y = runif(10,0,1), Position.Z = runif(10,0,1) )
d <- angles_between_subsequent_vectors( d, dt = 1, ddt = 1 )
d
lines( d[,1], d[,2])
plot.new() ; lines( d[,1], d[,2])
d <- data.frame(Position.X = 0,
Position.Y = 0,
Position.Z = 0 )
d
d[2,1] = 2
d
runif(1,-1,1)
runif(1,-1,1)
runif(1,-1,1)
runif(1,-1,1)
runif(1,-1,1)
runif(1,-1,1)
runif(1,-1,1)
runif(1,-1,1)
simluate_brownian_motion < function(n)
{
d <- data.frame(Position.X = 0,
Position.Y = 0,
Position.Z = 0 )
for ( i in 2:n )
{
for ( d in 1:3 )
{
d[i,d] = d[i-1,d] = runif(1,-1,1)
}
}
return ( d )
}
simluate_brownian_motion < function( n )
{
d <- data.frame(Position.X = 0,
Position.Y = 0,
Position.Z = 0 )
for ( i in 2:n )
{
for ( d in 1:3 )
{
d[i,d] = d[i-1,d] = runif(1,-1,1)
}
}
return ( d )
}
simluate_brownian_motion <- function( n )
{
d <- data.frame(Position.X = 0,
Position.Y = 0,
Position.Z = 0 )
for ( i in 2:n )
{
for ( d in 1:3 )
{
d[i,d] = d[i-1,d] = runif(1,-1,1)
}
}
return ( d )
}
d <- simluate_brownian_motion(10)
d <- data.frame(Position.X = 0,
Position.Y = 0,
Position.Z = 0 )
for ( i in 2:n )
{
for ( d in 1:3 )
{
d[i,d] <- d[i-1,d] = runif(1,-1,1)
}
}
n <- 10
d <- data.frame(Position.X = 0,
Position.Y = 0,
Position.Z = 0 )
for ( i in 2:n )
{
for ( d in 1:3 )
{
d[i,d] <- d[i-1,d] = runif(1,-1,1)
}
}
d <- data.frame(Position.X = 0,
Position.Y = 0,
Position.Z = 0 )
for ( i in 2:n )
{
for ( j in 1:3 )
{
d[i,j] <- d[i-1,j] = runif(1,-1,1)
}
}
d <- data.frame(Position.X = 0,
Position.Y = 0,
Position.Z = 0 )
for ( i in 2:n )
{
for ( j in 1:3 )
{
d[i,j] <- d[i-1,j] + runif(1,-1,1)
}
}
simluate_brownian_motion <- function( n )
{
d <- data.frame(Position.X = 0,
Position.Y = 0,
Position.Z = 0 )
for ( i in 2:n )
{
for ( j in 1:3 )
{
d[i,j] <- d[i-1,j] + runif(1,-1,1)
}
}
return ( d )
}
simluate_brownian_motion( 10 )
plot.new(); lines( d[,1], d[,2] )
d <- simluate_brownian_motion( 10 )
plot.new(); lines( d[,1], d[,2] )
plot.new(); lines( d[,1], d[,2] )
plot( d[,1], d[,2] ); lines( d[,1], d[,2] )
d <- simluate_brownian_motion( 100 )
d <- simluate_brownian_motion( 100 )
d <- angles_between_subsequent_vectors( d, dt = 1, ddt = 1 )
angles_between_subsequent_vectors <- function ( d, dt = 2, ddt = 4 )
{
name_angle_out = "angle";
name_cosine_out = "cosine_angle"
# initialize the output column
d[name_angle_out] <- rep(NA, nrow(d))
d[name_cosine_out] <- rep(NA, nrow(d))
# loop through all positions in the data frame
for ( t in seq(1, nrow( d ) - 2 * dt, ddt ) )
{
# get the position vector from every dt'h data point
p1 <- get_vec(d, t)
p2 <- get_vec(d, t+dt)
p3 <- get_vec(d, t+dt+dt)
# comput the difference vectors between subsequent positions
d1 <- (p2 - p1)
d2 <- (p3 - p2)
# compute vector lengths
length_d1 = sqrt( sum( d1^2 ) )
length_d2 = sqrt( sum( d2^2 ) )
# compute the dot product
dotProduct <- sum( d1 * d2 )
cosine_angle = dotProduct / ( length_d1 * length_d2 )
angle = 180 / pi * acos( pmin( pmax( cosine_angle, -1.0 ), 1.0 ) )
# Note: the pmin(pmax ... ) is necessary due to an inaccuracy in R:
# - https://stackoverflow.com/questions/18806944/about-arccos-function-in-r-nan-produced
d[t+dt, name_angle_out] <- angle
d[t+dt, name_cosine_out] <- cosine_angle
}
return ( d );
}
d <- simluate_brownian_motion( 100 )
d <- angles_between_subsequent_vectors( d, dt = 1, ddt = 1 )
View(d)
hist( d$angle )
hist( d$cosine_angle )
d <- simluate_brownian_motion( 1000 )
d <- angles_between_subsequent_vectors( d, dt = 1, ddt = 1 )
hist( d$angle )
hist( d$cosine_angle )
d[i,j] <- d[i-1,j] + rnorm(1,0,1)
rnorm(1,0,1)
rnorm(1,0,1)
rnorm(1,0,1)
rnorm(1,0,1)
simluate_brownian_motion <- function( n )
{
d <- data.frame(Position.X = 0,
Position.Y = 0,
Position.Z = 0 )
for ( i in 2:n )
{
for ( j in 1:3 )
{
#d[i,j] <- d[i-1,j] + runif(1,-1,1)
d[i,j] <- d[i-1,j] + rnorm(1,0,1)
}
}
return ( d )
}
d <- simluate_brownian_motion( 1000 )
plot( d[,1], d[,2] ); lines( d[,1], d[,2] )
d <- angles_between_subsequent_vectors( d, dt = 1, ddt = 1 )
hist(d$angle)
hist( d$cosine_angle )
get_vec_2d <- function(d, irow)
{
# CHANGE HERE:
xyz_column_names <- c("Position.X", "Position.Y")
# Below code should work without changes...
dims = length(xyz_column_names);
v <- vector( l = dims )
for ( i in 1 : dims )
{
v[i] <- d[irow, xyz_column_names[i]]
}
return(v)
}
angles_between_subsequent_vectors <- function ( d, dt = 2, ddt = 4 )
{
name_angle_out = "angle";
name_cosine_out = "cosine_angle"
# initialize the output column
d[name_angle_out] <- rep(NA, nrow(d))
d[name_cosine_out] <- rep(NA, nrow(d))
# loop through all positions in the data frame
for ( t in seq(1, nrow( d ) - 2 * dt, ddt ) )
{
# get the position vector from every dt'h data point
p1 <- get_vec_2d(d, t)
p2 <- get_vec_2d(d, t+dt)
p3 <- get_vec_2d(d, t+dt+dt)
# comput the difference vectors between subsequent positions
d1 <- (p2 - p1)
d2 <- (p3 - p2)
# compute vector lengths
length_d1 = sqrt( sum( d1^2 ) )
length_d2 = sqrt( sum( d2^2 ) )
# compute the dot product
dotProduct <- sum( d1 * d2 )
cosine_angle = dotProduct / ( length_d1 * length_d2 )
angle = 180 / pi * acos( pmin( pmax( cosine_angle, -1.0 ), 1.0 ) )
# Note: the pmin(pmax ... ) is necessary due to an inaccuracy in R:
# - https://stackoverflow.com/questions/18806944/about-arccos-function-in-r-nan-produced
d[t+dt, name_angle_out] <- angle
d[t+dt, name_cosine_out] <- cosine_angle
}
return ( d );
}
d <- simluate_brownian_motion( 100 )
plot( d[,1], d[,2] ); lines( d[,1], d[,2] )
d <- angles_between_subsequent_vectors( d, dt = 1, ddt = 1 )
hist( d$angle )
hist( d$cosine_angle )
d <- simluate_brownian_motion( 1000 )
plot( d[,1], d[,2] ); lines( d[,1], d[,2] )
d <- angles_between_subsequent_vectors( d, dt = 1, ddt = 1 )
hist( d$angle )
hist( d$cosine_angle )
d <- simluate_brownian_motion( 10000 )
plot( d[,1], d[,2] ); lines( d[,1], d[,2] )
d <- angles_between_subsequent_vectors( d, dt = 1, ddt = 1 )
hist( d$angle )
hist( d$cosine_angle )
get_vec_3d <- function(d, irow)
{
# CHANGE HERE:
xyz_column_names <- c("Position.X", "Position.Y", "Position.Z")
# Below code should work without changes...
dims = length(xyz_column_names);
v <- vector( l = dims )
for ( i in 1 : dims )
{
v[i] <- d[irow, xyz_column_names[i]]
}
return(v)
}
get_vec_2d <- function(d, irow)
{
# CHANGE HERE:
xyz_column_names <- c("Position.X", "Position.Y")
# Below code should work without changes...
dims = length(xyz_column_names);
v <- vector( l = dims )
for ( i in 1 : dims )
{
v[i] <- d[irow, xyz_column_names[i]]
}
return(v)
}
source("run.R", chdir = true);
source("/Users/tischi/Documents/HTM_Explorer/run.R", chdir = true);
source("/Users/tischi/Documents/HTM_Explorer/run.R", chdir = T);
source("/Users/tischi/Documents/HTM_Explorer/run.R", chdir = true);
path = "/Users/tischi/Documents/HTM_Explorer/";setwd(path);source("run.R");
htm
rm(htm0
)
rm(htm)
htm
path = "/Users/tischi/Documents/HTM_Explorer/";setwd(path);source("run.R");
path = "/Users/tischi/Documents/HTM_Explorer/";setwd(path);source("run.R");
htmGetListSetting(htm,"statistics","objectCount")
data <- htm@data
measurement <- htmGetListSetting(htm,"statistics","measurement")
experiments <- sort(unique(data[[htm@settings@columns$experiment]]))
#experiments_to_exclude <- htmGetVectorSettings("statistics$experiments_to_exclude")
negcontrols <- c(htmGetListSetting(htm,"statistics","negativeControl"))
#transformation <- htmGetListSetting(htm,"statistics","transformation")
treatments <- sort(unique(data[[htm@settings@columns$treatment]]))
colObjectCount <- htmGetListSetting(htm,"statistics","objectCount")
#ctrls <- htm@settings@ctrlsNeg
negative_ctrl <- c(htmGetListSetting(htm,"statistics","negativeControl"))
positive_ctrl <- c(htmGetListSetting(htm,"statistics","positiveControl"))
# output
print("");print("Experiments:")
print(experiments)
print("");print(paste("Number of treatments:",length(treatments)))
print("");print(paste("Negative control:",negative_ctrl))
print("");print(paste("Positive control:",positive_ctrl))
print("");print(paste("Measurement:",measurement))
print(""); print("")
colObjectCount %in% names(data)
if(!(colObjectCount %in% names(data))) {
print(paste("ERROR: object count",measurement,"does not exist in data"))
return(0)
}
colObjectCount <- htmGetListSetting(htm,"statistics","objectCount")
colObjectCount
path = "/Users/tischi/Documents/HTM_Explorer/";setwd(path);source("run.R");
