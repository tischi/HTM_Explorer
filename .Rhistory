1+Inf
install.packages(Rcpp)
install.packages("Rcpp"")
)
)
.
install.packages("Rcpp")
install.packages("testhat")
install.packages("testthat")
library(testthat)
library(testtha)
pathData = ""
pathData = ""
gw <- gwindow("HTM Explorer", visible=F)
gg <- ggroup(horizontal = FALSE, cont=gw)
gf <- gframe("frame", cont=gg)
glabel("HTM Analysis Tool", cont=gf)
glabel("(c) ALMF@EMBL.DE", cont=gf)
glabel("version: 2011-11-23", cont=g)
visible(gw) <- T
require(gWidgets)
require(gWidgetstcltk)
require(ggplot2)
#require(grid)
guiToolkit("tcltk")
gw <- gwindow("HTM Explorer", visible=F)
source('~/Dropbox/R/HTM/plots.R')
names
a="aaaa_ass"
strsplit(a,"aaaa")
strsplit(a,"aaaa")[[2]]
strsplit(a,"aaaa")[[1]][2]
gmessage
?gmessage
1!=0
l$a=1
l=list()
l$a=1
l$b=2
l
?assign
?environment
environment()
.GlobalEnv
globalenv()
htm@treatmentSummary <- htmTreatmentSummary(htm)
a="a"
"a" %in% a
c(htmGetListSetting("statistics","positiveControl"))
integrate( function(x) {dnorm(x,mean=mean_pos,sd=sd_pos)}, min_neg, max_neg)
integrate( function(x) {dnorm(x,mean=0,sd=1)}, 0, 1)
1 - integrate( function(x) {dnorm(x,mean=0,sd=1)}, 0, 1)
1 - integrate( function(x) {dnorm(x,mean=0,sd=1)}, 0, 1).value
1 - integrate.value( function(x) {dnorm(x,mean=0,sd=1)}, 0, 1)
integral <- integrate.value( function(x) {dnorm(x,mean=0,sd=1)}, 0, 1)
integral <- integrate( function(x) {dnorm(x,mean=0,sd=1)}, 0, 1)
integrael$value
integral$value
integrate( function(x) {dnorm(x,mean=0,sd=1)}, 0, 1)$value
d = data.frame("treat","value","exp")
d
d = data.frame(treat,value,exp)
source('~/.active-rstudio-document')
d
source('~/Dropbox/R/anova_test.R')
d
source('~/Dropbox/R/anova_test.R')
source('~/Dropbox/R/anova_test.R')
source('~/Dropbox/R/anova_test.R')
m = model.matrix( value ~ exp + treat, d)
source('~/Dropbox/R/anova_test.R')
source('~/Dropbox/R/anova_test.R')
source('~/Dropbox/R/anova_test.R')
mean(c(1,2,1,100))
mean(d$value)
tapply(d,)
?subset
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
exp = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,100,2,2,3,10,3,23,20)
d = data.frame(treat=treat,value=value,exp=exp)
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
exp = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,100,2,2,3,10,3,2,3,20)
d = data.frame(treat=treat,value=value,exp=exp)
mc1 = mean(subset(d, exp=="p1" && treat=="c", select=value))
mc1 = mean(subset(d, exp=="p1" && treat=="c")$value)
mc1
subset(d, exp=="p1" && treat=="c")
subset(d, d$exp=="p1" && d$treat=="c")
d
subset(d, exp=="p1")
subset(d, (exp=="p1") & (treat=="c") )
mean(subset(d, (exp=="p1") & (treat=="c") )$value)
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
exp = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,100,2,2,3,10,3,2,3,20)
value_corr = NA
d = data.frame(treat=treat,value=value,exp=exp,value_corr=value_corr)
d
?split
is = split(d,exp)
is
is
is = split(d,exp)
for(i in is) {
print(i)
#mc = mean(subset(d, (exp=="p1") & (treat=="c") )$value)
#which
#d$value_corr =
}
is = split(1:nrow(d),d$exp)
is
d[i[1]]
d[i[1]]
is[1]
d[is[1]]
d[is[1],]
d[,is[1]]
ids = which(d$exp==exp)
ids
exp
for(exp in unique(d$exp)) {
mc = mean(subset(d, (exp=="p1") & (treat=="c") )$value)
ids = which(d$exp==exp)
print(ids)
#d$value_corr[which(d$exp==exp)] =
}
for(exp in unique(d$exp)) {
mc = mean(subset(d, (exp=="p1") & (treat=="c") )$value)
ids = which(d$exp==exp)
print(ids)
d$value_corr[ids] = d$value[ids] - mc
}
d
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
block = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,100,2,2,3,10,3,2,3,20)
value_corr = NA
d = data.frame(treat=treat,value=value,exp=exp,value_corr=value_corr)
for(exp in unique(d$exp)) {
mc = mean(subset(d, (exp==exp) & (treat=="c") )$value)
ids = which(d$exp==exp)
print(ids)
d$value_corr[ids] = d$value[ids] - mc
}
d
for(e in unique(d$exp)) {
print(e)
mc = mean(subset(d, (exp==e) & (treat=="c") )$value)
ids = which(d$exp==exp)
print(ids)
d$value_corr[ids] = d$value[ids] - mc
}
unique(d$exp)
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
block = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,100,2,2,3,10,3,2,3,20)
value_corr = NA
d = data.frame(treat=treat,value=value,exp=exp,value_corr=value_corr)
unique(d$exp)
d$exp
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
block = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,100,2,2,3,10,3,2,3,20)
value_corr = NA
d = data.frame(treat=treat,value=value,block=block,value_corr=value_corr)
for(b in unique(d$block)) {
print(b)
mc = mean(subset(d, (block==b) & (treat=="c") )$value)
ids = which(d$block==b)
print(mc)
print(ids)
d$value_corr[ids] = d$value[ids] - mc
}
d
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
block = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,100,2,2,3,100,3,2,3,100)
value_corr = NA
d = data.frame(treat=treat,value=value,block=block,value_corr=value_corr)
fit = lm(value ~ block + treat, d)
print(fit)
mean(value)
mean(value[treat=="c"])
mean(c(1,2,1))
mean(c(2,2,3))
m = model.matrix( value ~ block + treat, d)
m
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
block = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,1000,2,2,3,100,3,2,3,100)
value_corr = NA
d = data.frame(treat=treat,value=value,block=block,value_corr=value_corr)
fit = lm(value ~ block + treat, d)
print(fit)
d
m = model.matrix( value ~ block + treat, d)
m
summary(fit)
source('~/Desktop/rettestwithblockin/TischiRegression.R', echo=TRUE)
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
block = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,100,2,2,3,10,3,2,3,20)
mean(c(1,2,1,100))
crossprod(d.tischi, value)
crossprod(d.tischi, value)
## ----create design matrix------------------------------------------------
f.tischi <- formula(~ 0 + block + treat)
d.tischi   <- model.matrix(f.tischi)
d.tischi
# View(d.tischi)
## test rank
min(svd(d.tischi)$d)
crossprod(d.tischi, value)
solve(crossprod(d.tischi))
beta.t <- solve(crossprod(d.tischi)) %*%  crossprod(d.tischi, value)
beta.t
beta.t <- solve(crossprod(d.tischi, d.tischi)) %*%  crossprod(d.tischi, value)
beta.t
d.tischi %*% beta.t
56.916667 - 15.694444
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
block = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,5,2,2,3,6,3,2,3,5)
value_corr = NA
d = data.frame(treat=treat,value=value,block=block,value_corr=value_corr)
for(b in unique(d$block)) {
print(b)
mc = mean(subset(d, (block==b) & (treat=="c") )$value)
ids = which(d$block==b)
print(mc)
print(ids)
d$value_corr[ids] = d$value[ids] - mc
}
d
treat = c("c","c","c","t","c","c","c","t","c","c","c","t")
block = c("p1","p1","p1","p1","p2","p2","p2","p2","p3","p3","p3","p3")
value = c(1,2,1,100,2,2,3,10,3,2,3,20)
value_corr = NA
d = data.frame(treat=treat,value=value,block=block,value_corr=value_corr)
for(b in unique(d$block)) {
print(b)
mc = mean(subset(d, (block==b) & (treat=="c") )$value)
ids = which(d$block==b)
print(mc)
print(ids)
d$value_corr[ids] = d$value[ids] - mc
}
d
mean(c(98.66,7.66,17.33))
d.tischi
0.33^2 + 0.66^2 + 0.33^2 + (98.66-41.22)^2
lm.tischi <- lm(value ~ 0 + d.tischi)
lm.tischi
res <- summary(lm.tischi)
res
residuals(res)
14^2+13^2+14^2+43^2
d
test <- t.test(d$value_corr ~ d$treat, var.equal=TRUE)
test
length(d$treat)
test$statistic
2-2*pt(abs(test$statistic), df =  df.tischi)
df.tischi <- length(value) - dim(d.tischi)[2]
df.tischi
2-2*pt(abs(test$statistic), df =  df.tischi)
?pt
?t.test
?pt
?cl
?ci
?guiToolkit
cc = c(-1.25,-0.25,0.75,0.75,-1,0,0,1,-2.25,1.75,0.75,-0.25)
tc = c(-3.25, 0, -2.25)
t.test(x=cc, y=tc, alternative = "two.sided", var.equal = FALSE)
t.test(x=cc, y=tc, alternative = "two.sided", var.equal = TRUE)
t <- t.test(x=cc, y=tc, var.equal = TRUE)
2-2*pt(abs(t$statistic), df = 13)
t <- t.test(x=cc, y=tc, alternative = "two.sided", var.equal = TRUE)
nBlocks = 3
n = length(cc)+length(tc)
2-2*pt(abs(t$statistic), df = n - (nBlocks-1) - 2 )
?dataframe
?data.frame
L3 <- LETTERS[1:3]
(d <- data.frame(cbind(x=1, y=1:10), fac=sample(L3, 10, replace=TRUE)))
d
d$x <- NULL
d
0.9^6
0.9^10
0.9^6
0.85^6
6000*0.4
# user input
pathTable = "//t2schultz/t2schultz/Users/Martina/MIN6 proINS BAR/histo-TrackLengths_cp--cp-out/m1.csv"
pathTable = "/Users/tischi/Downloads/m1.csv"
pathPdf = paste0(pathTable,"--graphs--",runif(1,1,10),".pdf")
minLifetime = 3
# do not change
cLabel = "TrackObjects_Label_3"
cLifetime = "TrackObjects_Lifetime_3"
cIntensity = "Intensity_MeanIntensity_m2SmoothTophat"
cFrame = "Metadata_TimeFrame"
cX = "Location_Center_X"
cY = "Location_Center_Y"
d = read.table(file=pathTable, header=T, skip=1, sep=",", stringsAsFactors=F, check.names=T)
colnames(d)
a
# user input
pathTable = "//t2schultz/t2schultz/Users/Martina/MIN6 proINS BAR/histo-TrackLengths_cp--cp-out/m1.csv"
pathTable = "/Users/tischi/Downloads/m1.csv"
pathPdf = paste0(pathTable,"--graphs--",runif(1,1,10),".pdf")
minLifetime = 3
# do not change
cLabel = "TrackObjects_Label"
cLifetime = "TrackObjects_Lifetime"
cIntensity = "Intensity_MeanIntensity_m2SmoothTophat"
cFrame = "Metadata_TimeFrame"
cX = "Location_Center_X"
cY = "Location_Center_Y"
d = read.table(file=pathTable, header=T, skip=1, sep=",", stringsAsFactors=F, check.names=T)
colnames(d)
pdf(file=paste(pathPdf))
for (iObject in unique(d[[cLabel]])) {
ds = subset(d, d[[cLabel]]==iObject)
if(max(ds[[cLifetime]]) > minLifetime) {
plot(ds[[cFrame]],ds[[cIntensity]])
x = round(mean(ds[[cX]]),1)
y = round(mean(ds[[cY]]),1)
title(paste0(iObject,"  x:",x,"  y:",y))
}
}
dev.off()
path = file.choose()
rnorm
rnorm(10, mean = 0, sd = 1)
d = data.frame()
d$label = c("ctrl","ctrl")
d = data.frame(label = character(0))
d
d$label = c("ctrl","ctrl")
d.append("ctrl")
d <- rbind(d,c("label")
)
d
d$label
?t.test
Control = c(91, 87, 99, 77, 88, 91)Treat = c(101, 110, 103, 93, 99, 104)
> t.test(Control,Treat,alternative="less", var.equal=TRUE)
Control = c(91, 87, 99, 77, 88, 91)
Treat = c(101, 110, 103, 93, 99, 104)
t.test(Control,Treat,alternative="less", var.equal=TRUE)
d = data.frame(v = c(1,2,3,4,5,2,3,4,4), t=c("a","a","a","a","b","b","b","b","b"))
d
t.test(d$v ~ d$t)
t.test(d$v ~ d$t, var.equal=TRUE)
sd(d$v)
3.6-2.5
mad
mad(c(1,2,4,2,3,5,5,6,7,4))
sd(c(1,2,4,2,3,5,5,6,7,4))
?amd
?mad
?merge
?subset
length(c(1212,2,2))
seq(1,2)
seq(2,2)
require(plyr)
?subset
?subset
source('~/Downloads/asmallhelp/neurodistquant.R', echo=TRUE)
basefolder = paste(c("",tmp[1:(length(tmp)-1)]),collapse="/")
basefolder
folders <- list.dirs(basefolder, full.names=TRUE, recursive=F)
folders
## computation
for (folder in folders) {
print(folder)
filenames <- list.files(folder, pattern="*.txt", full.names=TRUE)
ldf <- lapply(filenames, function(z) read.table(z,sep="\t",col.names=c("x","y")))
## check how many measurements we have and construct a dataframe
N = length(ldf)
M = 0
for (i in 1:N) {
M = M + nrow(ldf[[i]])
}
v = vector(length=M)
d = data.frame(segment=v, segment.last=v, x=v, y=v, fish=v, d=v, dNorm=v)
## fill dataframe
M = 1
for (i in 1:N) {
#dx = c(diff(ldf[[i]]$x),0)
#dy = c(diff(ldf[[i]]$y),0)
m = nrow(ldf[[i]])
M2 = M + m - 1
d$segment[M:M2] = seq(1:m)
d$segment.last[M:(M2-1)] = 0
d$segment.last[M2] = 1
d$x[M:M2] = ldf[[i]]$x
d$y[M:M2] = ldf[[i]]$y
d$fish[M:M2] = i
#d[M:M2][["y"]] = ldf[[i]]$y
M = M2 + 1
#d = sqrt(dx^2+dy^2)
#totals[i] = sum(d)
#drel = d/totals[i]
#print(nrow(ldf[[i]]))
#print(totals[i])
}
## analyse
d$d = c(sqrt(diff(d$x)^2 + diff(d$y)^2),0)
d$d[which(d$segment.last==1)] = NaN
total = tapply(d$d, d$fish, function(z) sum(z,na.rm=T))
mean.total = mean(total)
total = data.frame(fish = as.numeric(names(total)), total)
d = merge(d,total)
d$dNorm = d$d / d$total
total = tapply(d$dNorm,d$fish,sum)
seg.avg = tapply(d$dNorm,d$segment,function(z) mean(z,na.rm=T))
seg.sd = tapply(d$dNorm,d$segment,function(z) sd(z,na.rm=T))
seg.N = tapply(d$dNorm,d$segment,function(z) sum(!is.nan(z)))
seg.i = seq(1,length(seg.N))
dseg = data.frame(segment = seg.i,average=seg.avg,sd=seg.sd,sem=seg.sd/sqrt(seg.N),N=seg.N)
treatment = last_folder(folder)
write.table(d,sep=',',file=file.path(basefolder,paste0(treatment,"--table",".csv")),row.names=F)
write.table(dseg,sep=',',file=file.path(basefolder,paste0(treatment,"--segments",".csv")),row.names=F,col.names=T)
write.table(mean.total,sep=',',file=file.path(basefolder,paste0(treatment,"--mean.total",".csv")),row.names=F,col.names=c("total"))
print(treatment)
print(dseg)
}
is.null(a)
is.numeric(a)
exists(a)
exist(a)
exists(a)
?exists
exists("a")
a <- 1
exists("a")
b==T
a = NaN
is.na(a)
is.nan(a)
a = list()
a$1=1
a$a=1
length(a)
1 == 1.0
(1/3 + 1/3 + 1/3) == 1.0
(1/3 + 1/3 + 1/2) == 1.0
(1/3 + 1/3 + 1/3) == 1
1/3+1/3
(2/3 + 1/3) == 1
a = 1
(2/3 + 1/3) == a
(2/3 + 1/3) == a
3+4+3+4+4+4+4+3.5+4.5+3.5+3.5+4.5
1-(0.05)^2
1-(0.05)^(1/2)
(1-0.77)^2
install.packages(c("shiny", "plotly","shinyjs","xlsx"))
library(shiny)
runGitHub("shinyHTM", "tischi")
1.5^(1/4)
1.5^(4)
1.5^(2)
1.5^(3)
3.5^(3)
3.5^(2)
1.5^(2)
1.25^(2)
map_dbl
?map_dbl
??map_dbl
runGitHub("shinyHTM", "tischi")
library(shiny)
runGitHub("shinyHTM", "tischi")
?runcodeUI
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
runcodeUI(code = "shinyjs::alert('Hello!')")
),
server = function(input, output) {
runcodeServer()
}
)
}
source('~/Desktop/Untitled.R', echo=TRUE)
textInput("prefixFile", "Prefix: column with file name", "FileName_")
source('~/Desktop/Untitled.R', echo=TRUE)
source('~/Desktop/Untitled.R', echo=TRUE)
textInput("text", "Please enter some text", "some text")
source('~/Desktop/Untitled.R', echo=TRUE)
?runcodeUI
if (interactive()) {
source('~/Desktop/Untitled.R', echo=TRUE)
?setTkProgressBar
setwd("/Users/tischi/Documents/HTM_Explorer/")
source("run.R")
htm
rm(htm)
source("run.R")
htm
htm@data$Layout_Replicate = paste(htm@data$Metadata_Layout,htm@data$Metadata_Replicate)
names(htm@data)
